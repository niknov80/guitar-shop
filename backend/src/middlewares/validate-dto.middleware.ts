import { NextFunction, Request, Response } from 'express';
import { ZodSchema } from 'zod';

const BAD_REQUEST_STATUS = 400;
const VALIDATION_ERROR_MESSAGE = 'Validation error';

/**
 * Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–º–æ—â—å—é Zod-—Å—Ö–µ–º—ã.
 *
 * @param schema - Zod-—Å—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
 * @returns Express middleware, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ–¥–∞—é—â–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
 */
export const validateDto =
  <T>(schema: ZodSchema<T>) =>
  (req: Request, res: Response, next: NextFunction): void => {
    console.log('‚úÖ validateDto called', req.method, req.url);
    const result = schema.safeParse(req.body);

    if (!result.success) {
      console.log('‚ùå Validation failed:', result.error.format());
      console.log('üì¶ Incoming body:', req.body);

      res.status(BAD_REQUEST_STATUS).json({
        message: VALIDATION_ERROR_MESSAGE,
        errors: result.error.format(),
      });
      return;
    }

    req.body = result.data;
    next();
  };
