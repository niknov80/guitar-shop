import cors from 'cors';
import express, { Express } from 'express';
import helmet from 'helmet';
import morgan from 'morgan';
import { errorHandler } from './middlewares/error.middleware';
import productRoutes from './routes/product.route';
import userRoutes from './routes/user.route';
import logger from './shared/logger/logger';
import path from 'path';

/**
 * –°–æ–∑–¥–∞—ë—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 *
 * –í–∫–ª—é—á–∞–µ—Ç:
 * - JSON-–ø–∞—Ä—Å–µ—Ä
 * - CORS
 * - –ó–∞—â–∏—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (helmet)
 * - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (morgan)
 * - –°–∏—Å—Ç–µ–º–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç /health
 * - –†–æ—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
 *
 * @returns –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Express
 */
export const createApp = (): Express => {
  const app = express();

  // Middleware
  app.use(express.json());
  app.use(
    cors({
      origin: true,
      credentials: true,
    })
  );

  app.use((req, _res, next) => {
    logger.info(`üåç Incoming request: ${req.method} ${req.url}, origin: ${req.headers.origin}`);
    next();
  });

  app.use(
    helmet({
      contentSecurityPolicy: false,
    })
  );

  app.use(morgan('dev'));

  // –°–∏—Å—Ç–µ–º–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  app.get('/health', (_req, res) => {
    res.status(200).json({ status: 'ok' });
  });

  app.use(
    '/static',
    express.static(path.resolve(__dirname, '..', 'static'), {
      setHeaders: res => {
        res.setHeader('Access-Control-Allow-Origin', '*');
      },
    })
  );

  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  app.use('/users', userRoutes);
  app.use('/products', productRoutes);

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  app.use(errorHandler);

  return app;
};
